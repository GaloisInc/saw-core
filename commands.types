CryptolSetup :: Type 0 -> Type 0
JavaSetup :: Type 0 -> Type 0
LLVMSetup :: Type 0 -> Type 0

PtrSetup :: (Type 0 -> Type 0) -> Type 0
javaPtrSetup :: PtrSetup JavaSetup
llvmPtrSetup :: PtrSetup LLVMSetup

Setup :: (Type 0 -> Type 0) -> Type 0
cryptolSetup :: Setup CryptolSetup
javaSetup :: Setup JavaSetup
llvmSetup :: Setup LLVMSetup

mayAlias :: {m :: Type 0 -> Type 0} -> {{PtrSetup m}} -> {a :: Type 0}
         -> [a] -> m ()
assert   :: {m :: Type 0 -> Type 0} -> {{Setup m}} -> Bool -> m ()
assertI  :: {m :: Type 0 -> Type 0} -> {{Setup m}} -> a -> a -> m ()
assume   :: {m :: Type 0 -> Type 0} -> {{Setup m}} -> Bool -> m ()
ensureI  :: {m :: Type 0 -> Type 0} -> {{PtrSetup m}} -> a -> a -> m ()
modify   :: {m :: Type 0 -> Type 0} -> {{PtrSetup m}} -> a -> m ()
return   :: {m :: Type 0 -> Type 0} -> {{Setup m}} -> a -> m ()

hasLLVMType 0 :: {a :: Type 0} -> a -> LLVMType 0 -> LLVMSetup ()
hasJavaType 0 :: {a :: Type 0} -> a -> JavaType 0 -> JavaSetup ()

Name :: Type 0
FilePath :: Type 0

extractLLVM :: {a :: Type 0} -> FilePath -> Name -> LLVMSetup () -> a
extractJava :: {a :: Type 0} -> Name -> JavaSetup () -> a
extractCryptol :: {a :: Type 0} -> FilePath -> Name -> CryptolSetup () -> a

loadAIG :: {a :: Type 0} -> FilePath -> FileIO a
loadCNF :: {a :: Type 0} -> FilePath -> FileIO (a -> Bool)
loadSBV :: {a :: Type 0} -> FilePath -> FileIO a

RuleSetup :: Type 0 -> Type 0
Rule :: Type 0
rule :: {a :: Type 0} -> a -> a -> RuleSetup Rule
expand :: {a :: Type 0} -> a -> Rule
forall :: {a :: Type 0} -> (a -> RuleSetup Rule) -> RuleSetup Rule
rewrite :: {a :: Type 0} -> RuleSetup () -> a -> a

FileIO :: Type 0 -> Type 0

writeAIG :: {m :: Type 0 -> Type 0} -> {{FileIO m}} -> {a :: Type 0}
         -> FilePath -> a -> m ()
writeSMTLib :: {m :: Type 0 -> Type 0} -> {{FileIO m}} -> {a :: Type 0}
            -> FilePath -> a -> m ()
writeCNF :: {m :: Type 0 -> Type 0} -> {{FileIO m}} -> {a :: Type 0}
         -> FilePath -> (a -> Bool) -> m ()

Prover :: Type 0 -> Type 0
ProverParams :: (Type 0 -> Type 0) -> Type 0

quickcheck :: {m :: Type 0 -> Type 0} -> {{Prover m}} -> {a :: Type 0}
           -> Int -> (a -> Bool) -> m (Maybe a)

sat :: {m :: Type 0 -> Type 0} -> {{Prover m}} -> {a :: Type 0}
    -> ProverParams m -> Int -> (a -> Bool) -> m (Maybe a)

prove :: {m :: Type 0 -> Type 0} -> {{Prover m}} -> {a :: Type 0}
      -> ProverParams m -> Int -> (a -> Bool) -> m (Maybe a)
