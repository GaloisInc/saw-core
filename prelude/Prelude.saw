module Prelude where

-- Grammar for the core prelude types.
--
-- We use double colons "::" to represent the type constraint on the core symbols.
--   e.g., "Bool :: sort 0" indicates "Bool" has type "sort 0"
-- Functions use "->" to separate arguments from result.
--   e.g., "f :: Bool -> Bool -> Bool"indicates "f" is a binary operation on Booleans.
--
-- Single colons ":" are used for for scoping variables to be used in subsequent arguments.
--   "f :: n : Integer -> Signed n -> Signed n"
-- This  indicates "f" is a function that takes an integer argument "n", and returns a function
-- that takes "n"-bit signed integer and returns another "n"-bit signed integer.
--
-- We prefix the parameter with a single question mark (e.g., "?(n : Integer)") to indicate
-- the parameter is not passed explicitly, but should be inferred by type unification.
--
-- We prefix the parameter with two question marks (e.g., "??(Ord a)") to indicate the
-- parameter is not passed explicitly, but should be obtained by finding a unique term with
-- that type in the surrounding context.  If there are multiple such terms, then fail.
--
-- We use a parameter with three question marks (e.g., "???(assert (eq x y))") to denote
-- parameters that are not explicitly passed, but must be found to show that the expression
-- is well formed.  This is used to ensure the index is valid when reading or updating an array.

--------------------------------------------------------------------------------
-- Equality proofs.

data Eq :: (t :: sort 1) -> t -> t -> sort 1 where {
    Refl :: (u :: sort 1) -> (x :: u) -> Eq u x x;
  }

trans :: (a :: sort 1) -> (x y z :: a) -> Eq a x y -> Eq a y z -> Eq a x z;
trans _ _ _ _ (Refl _ _) eq = eq;

sym :: (a :: sort 1) -> (x y :: a) -> Eq a x y -> Eq a y x;
sym _ _ _ (Refl a x) = Refl a x;

-- Unchecked assertion that two types are equal.
assert :: (a :: sort 1) -> (x :: a) -> (y :: a) -> Eq a x y;

coerce :: (y x :: sort 0) -> Eq (sort 0) x y -> x -> y;
coerce _ _ (Refl _ _) x = x;

rcoerce :: (y x :: sort 0) -> Eq (sort 0) y x -> x -> y;
rcoerce y x eq = coerce y x (sym (sort 0) y x eq);

unsafeCoerce :: (y x :: sort 0) -> x -> y;
unsafeCoerce y x = rcoerce y x (assert (sort 0) y x);

--------------------------------------------------------------------------------
-- Singleton types.

-- | Type @Single t x@ is a singleton type containing only the value
-- @MkSingle t x@. We use it to represent the lhs patterns of
-- conversions for primitive operations; type @Single t x@ can be
-- thought of as a variation of @Eq t x y@ without a right-hand side.

data Single :: (t :: sort 1) -> t -> sort 1 where {
    MkSingle :: (t :: sort 1) -> (x :: t) -> Single t x;
  }

--------------------------------------------------------------------------------
-- Booleans
data Bool :: sort 0 where {
    True :: Bool;
    False :: Bool;
  }

not :: Bool -> Bool;
not (True) = False;
not (False) = True;

and :: Bool -> Bool -> Bool;
and (True) b = b;
and (False) b = False;

or :: Bool -> Bool -> Bool;
or (True) b = True;
or (False) b = b;

xor :: Bool -> Bool -> Bool;
xor (True) b = not b;
xor (False) b = b; 

boolEq :: Bool -> Bool -> Bool;
boolEq True b = b;
boolEq False b = not b;

-- Could be derived from data declaration.
ite :: ?(a :: sort 1) -> Bool -> a -> a -> a;
ite _ (True)  t _ = t;
ite _ (False) _ f = f;

-- Rewrite rules for booleans.

not_not :: (x :: Bool) -> Eq Bool (not (not x)) x;
not_not True = Refl Bool True;
not_not False = Refl Bool False;

and_True :: (x :: Bool) -> Eq Bool (and x True) x;
and_True True = Refl Bool True;
and_True False = Refl Bool False;

and_False :: (x :: Bool) -> Eq Bool (and x False) False;
and_False True = Refl Bool False;
and_False False = Refl Bool False;

and_assoc :: (x y z :: Bool) -> Eq Bool (and x (and y z)) (and (and x y) z);
and_assoc True y z = Refl Bool (and y z);
and_assoc False _ _ = Refl Bool False;

and_idem :: (x :: Bool) -> Eq Bool (and x x) x;
and_idem True = Refl Bool True;
and_idem False = Refl Bool False;

not_or :: (x y :: Bool) -> Eq Bool (not (or x y)) (and (not x) (not y));
not_or True _ = Refl Bool False;
not_or False y = Refl Bool (not y);

not_and :: (x y :: Bool) -> Eq Bool (not (and x y)) (or (not x) (not y));
not_and True y = Refl Bool (not y);
not_and False _ = Refl Bool True;

ite_not :: (a :: sort 1) -> (b :: Bool) -> (x y :: a) -> Eq a (ite a (not b) x y) (ite a b y x);
ite_not a True _ y = Refl a y;
ite_not a False x _ = Refl a x;

--------------------------------------------------------------------------------
-- Pairs
fst :: (x y :: sort 0) -> #(x,y) -> x;
fst x y (l,h) = l;

snd :: (x y :: sort 0) -> #(x,y) -> y;
snd x y (l,h) = h;

--------------------------------------------------------------------------------
-- Either

data Either :: sort 0 -> sort 0 -> sort 0 where {
    Left  :: (s t :: sort 0) -> s -> Either s t;
    Right :: (s t :: sort 0) -> t -> Either s t;
  }

eitherCong0 :: (t x y :: sort 0) -> Eq (sort 0) x y -> Eq (sort 0) (Either x t) (Either y t);
eitherCong0 t x _ (Refl _ _) = Refl (sort 0) (Either x t);

eitherCong1 :: (t x y :: sort 0) -> Eq (sort 0) x y -> Eq (sort 0) (Either t x) (Either t y);
eitherCong1 t x _ (Refl _ _) = Refl (sort 0) (Either t x);

--------------------------------------------------------------------------------
-- Maybe
data Maybe :: sort 0 -> sort 0 where {
    Nothing :: (a :: sort 0) -> Maybe a;
    Just :: (a :: sort 0) -> a -> Maybe a;
  }

--------------------------------------------------------------------------------
-- Nat
data Nat :: sort 0 where {
    Zero :: Nat;
    Succ :: Nat -> Nat;
  }

eqNat :: Nat -> Nat -> sort 1;
eqNat x y = Eq Nat x y;

eqNatSucc :: (x y :: Nat) -> eqNat x y -> eqNat (Succ x) (Succ y);
eqNatSucc _ _ (Refl _ x) = Refl Nat (Succ x);

eqNatPrec :: (x y :: Nat) -> eqNat (Succ x) (Succ y) -> eqNat x y;
eqNatPrec _ _ (Refl _ (Succ x)) = Refl Nat x;

-- | Addition
addNat :: Nat -> Nat -> Nat; 
addNat x Zero = x;
addNat x (Succ y) = Succ (addNat x y);

eqNatAdd0 :: (x :: Nat) -> eqNat (addNat 0 x) x;
eqNatAdd0 Zero = Refl Nat 0;
eqNatAdd0 (Succ x) = eqNatSucc (addNat 0 x) x (eqNatAdd0 x);

eqNatAddS :: (x y :: Nat) -> eqNat (addNat (Succ x) y) (Succ (addNat x y));
eqNatAddS x Zero = Refl Nat (Succ x);
eqNatAddS x (Succ y) = eqNatSucc (addNat (Succ x) y) (Succ (addNat x y)) (eqNatAddS x y);

eqNatAddComm :: (x y :: Nat) -> eqNat (addNat x y) (addNat y x);
eqNatAddComm Zero y = eqNatAdd0 y;
eqNatAddComm (Succ x) y = 
  trans Nat
        (addNat (Succ x) y)
        (Succ (addNat x y))
        (Succ (addNat y x))
        (eqNatAddS x y)
        (eqNatSucc (addNat x y) (addNat y x) (eqNatAddComm x y));

-- | Multiplication
mulNat :: Nat -> Nat -> Nat;
mulNat x Zero = 0;
mulNat x (Succ y) = addNat x (mulNat x y);

data NatOrdering :: (x y :: Nat) -> sort 0 where {
    LeNatOrd :: (x z :: Nat) -> NatOrdering x (addNat z x);
    GtNatOrd :: (x z :: Nat) -> NatOrdering (addNat (Succ z) x) x;  
  }

natOrderingCong1 :: (x y z :: Nat) -> eqNat x y -> NatOrdering x z -> NatOrdering y z;
natOrderingCong2 :: (x y z :: Nat) -> eqNat x y -> NatOrdering z x -> NatOrdering z y;

succNatOrdering :: (x y :: Nat) -> NatOrdering x y -> NatOrdering (Succ x) (Succ y);
succNatOrdering _ _ (LeNatOrd x d) = LeNatOrd (Succ x) d;
succNatOrdering _ _ (GtNatOrd x d) = GtNatOrd (Succ x) d;

-- | Comparison
compareNat :: (x y :: Nat) -> NatOrdering x y;
compareNat Zero y = LeNatOrd Zero y;
compareNat (Succ x) Zero = GtNatOrd Zero x;
compareNat (Succ x) (Succ y) = succNatOrdering x y (compareNat x y);

--TODO


-- There are implicit constructors from integer literals.

--------------------------------------------------------------------------------
-- Fin

-- | Natural numbers less than a given bound.
data Fin :: (n :: Nat) -> sort 0 where {
    -- Fin value contains the value x and the number of additional values above it.
    FinVal :: (x r :: Nat) -> Fin (Succ (addNat r x));
  }

finCong :: (m n :: Nat) -> Eq Nat m n -> Eq (sort 0) (Fin m) (Fin n);
finCong _ _ (Refl _ v) = Refl (sort 0) (Fin v);


piCong0 :: (r x y :: sort 0) -> Eq (sort 0) x y -> (Eq (sort 0) (x -> r) (y -> r));
piCong0 r _ _ (Refl _ tp) = Refl (sort 0) (tp -> r);

piCong1 :: (r x y :: sort 0) -> Eq (sort 0) x y -> (Eq (sort 0) (r -> x) (r -> y));
piCong1 r _ _ (Refl _ tp) = Refl (sort 0) (r -> tp);

finSucc :: (n :: Nat) -> Fin n -> Fin (Succ n); 
finSucc _ (FinVal b r) = FinVal (Succ b) r;

-- | Return maximum finite number less than given bound if any.
finMax :: (n :: Nat) -> Maybe (Fin n);
finMax Zero = Nothing (Fin Zero);
finMax (Succ i) =
   Just (Fin (Succ i)) 
        (coerce (Fin (Succ i))
                (Fin (Succ (addNat 0 i)))
                (finCong (Succ (addNat 0 i))
                         (Succ i)
                         (eqNatSucc (addNat 0 i) i (eqNatAdd0 i)))
                (FinVal i 0));

finPred :: (n :: Nat) -> Fin n -> Maybe (Fin n);
finPred _ (FinVal Zero r) = Nothing (Fin (Succ r));
finPred _ (FinVal (Succ i) r) =
  Just (Fin (Succ (Succ (addNat r i))))
       (coerce (Fin (Succ (Succ (addNat r i))))
               (Fin (Succ (addNat (Succ r) i)))
               (finCong (Succ (addNat (Succ r) i))
                        (Succ (Succ (addNat r i)))
                        (eqNatSucc (addNat (Succ r) i) (Succ (addNat r i))
                                   (eqNatAddS r i)))
               (FinVal i (Succ r)));

finInc :: (i n :: Nat) -> Fin n -> Fin (addNat i n); 
finInc i _ (FinVal b r) =
  unsafeCoerce (Fin (Succ (addNat i (addNat r b))))
               (Fin (Succ (addNat r (addNat i b))))
               (FinVal (addNat i b) r);

finIncLim :: (n :: Nat) -> (m :: Nat) -> Fin m -> Fin (addNat m n);
finIncLim d _ (FinVal x r) =
  unsafeCoerce (Fin (addNat (Succ (addNat r x)) d))
               (Fin (Succ (addNat (addNat r d) x)))
               (FinVal x (addNat r d));

-- | Check property for all numbers less than a given upper bound.
forallFin :: (n :: Nat) -> (Fin n -> Bool) -> Bool;
forallFin n p = 
  let { go :: Maybe (Fin n) -> Bool;
        go (Nothing _) = True;
        go (Just _ v) = and (p v) (go (finPred n v));
      }
   in go (finMax n);

finSplitSum :: (m n :: Nat) -> Fin (addNat m n) -> Either (Fin m) (Fin n);
finSplitSum m n = 
  let { go :: (x :: Nat) -> eqNat (addNat n m) x -> Fin x -> Either (Fin m) (Fin n);
        go _ eq (FinVal v r) = finSplitSum2 n 0 v m r eq;
      }
   in go (addNat m n) (eqNatAddComm n m);

finSplitSum2 :: (n :: Nat)
             -> (i :: Nat) -- How many times we have iterated.
             -> (v :: Nat) -- How much of initial value remains.
             -> (m :: Nat) -- How much of m remains
             -> (r :: Nat) -- Initial remainer.
             -> eqNat (addNat n m) (Succ (addNat r v))
             -> Either (Fin (addNat m i)) (Fin n);
finSplitSum2 n i v Zero r eq =
  Right (Fin (addNat Zero i)) (Fin n)
        (rcoerce (Fin n)
                 (Fin (Succ (addNat r v)))
                 (finCong n (Succ (addNat r v)) eq)
                 (FinVal v r));
finSplitSum2 n i Zero (Succ p) _ _ =
  Left (Fin (addNat (Succ p) i)) (Fin n)
       (rcoerce (Fin (addNat (Succ p) i))
               (Fin (Succ (addNat p i)))
               (finCong (addNat (Succ p) i) (Succ (addNat p i))
                 (eqNatAddS p i))
               (FinVal i p));
finSplitSum2 n i (Succ v) (Succ p) r eq =
  rcoerce (Either (Fin (addNat (Succ p) i)) (Fin n))
          (Either (Fin (Succ (addNat p i))) (Fin n))          
          (eitherCong0 (Fin n)
                       (Fin (addNat (Succ p) i))
                       (Fin (Succ (addNat p i)))
                       (finCong (addNat (Succ p) i) (Succ (addNat p i))
                         (eqNatAddS p i)))
          (finSplitSum2 n (Succ i) v p r
            (eqNatPrec (addNat n p) (Succ (addNat r v)) eq));

-- | Injection from (Fin m, Fin n) into Fin (m * n)
finProduct :: (m :: Nat) -> Fin m -> (n :: Nat) -> Fin n -> Fin (mulNat m n);
finProduct _ (FinVal mv mr) _ (FinVal nv nr) =
  rcoerce (Fin (mulNat (Succ (addNat mr mv)) (Succ (addNat nr nv))))
          (Fin (Succ (addNat (addNat (mulNat mr (Succ (addNat nv nr))) nr)
                     (addNat (mulNat mv (Succ (addNat nv nr))) nv))))
          (finCong (mulNat (Succ (addNat mr mv)) (Succ (addNat nr nv)))
                   (Succ (addNat (addNat (mulNat mr (Succ (addNat nv nr))) nr)
                         (addNat (mulNat mv (Succ (addNat nv nr))) nv)))
                   (assert Nat (mulNat (Succ (addNat mr mv)) (Succ (addNat nr nv)))
                               (Succ (addNat (addNat (mulNat mr (Succ (addNat nv nr))) nr)
                                             (addNat (mulNat mv (Succ (addNat nv nr))) nv)))))
          (FinVal (addNat (mulNat mv (Succ (addNat nv nr))) nv)
                  (addNat (mulNat mr (Succ (addNat nv nr))) nr));

finSplitProduct :: (m n :: Nat) -> Fin (mulNat m n) -> #(Fin m, Fin n);
--TODO

--------------------------------------------------------------------------------
-- "Vec n a" is an array of n elements, each with type "a".
data Vec :: (n :: Nat) -> sort 0 -> sort 0 where {
    EmptyVec :: (tp :: sort 0) -> Vec 0 tp;
    ConsVec :: (tp :: sort 0) -> tp -> (n::Nat) -> Vec n tp -> Vec (Succ n) tp;
  }
--TODO

-- Function for generating an array.
generate :: (n :: Nat) -> (e :: sort 0) -> (Fin n -> e) -> Vec n e;
--TODO

-- Get and set an individual element in an array.
get :: (n :: Nat) -> (e :: sort 0) -> Vec n e -> Fin n -> e;
--TODO

-- | Axiomatic rewrite rule.
get_generate :: (n :: Nat) -> (e :: sort 0) -> (f :: Fin n -> e) -> (i :: Fin n) ->
                Eq e (get n e (generate n e f) i) (f i);

set :: (n :: Nat) -> (e :: sort 0) -> Vec n e -> Fin n -> e -> Vec n e;
--TODO

-- | Create a vector of length 1.
single :: (e :: sort 0) -> e -> Vec 1 e;
single e x = generate 1 e (\(i :: Fin 1) -> x);

get_single :: (e :: sort 0) -> (x :: e) -> Eq e (get 1 e (single e x) (FinVal 0 0)) x;
get_single e x = get_generate 1 e (\(i :: Fin 1) -> x) (FinVal 0 0);

-- | Take a prefix of a vector.
vMove :: (e :: sort 0)
      -> (x y :: Nat)
      -> (Fin y -> Fin x)
      -> Vec x e
      -> Vec y e;
vMove e x y f a = generate y e (\(j :: Fin y) -> get x e a (f j));

get_vMove :: (e :: sort 0) -> (m n :: Nat) -> (f :: Fin n -> Fin m) -> (v :: Vec m e) ->
             (i :: Fin n) -> Eq e (get n e (vMove e m n f v) i) (get m e v (f i));
get_vMove e m n f v i = get_generate n e (\(j :: Fin n) -> get m e v (f j)) i;

-- | Take a prefix of a vector.
vTake :: (e :: sort 0) -> (x y :: Nat) -> Vec (addNat x y) e -> Vec x e;
vTake e n o a = vMove e (addNat n o) n (finIncLim o n) a;

get_vTake :: (e :: sort 0) -> (m n :: Nat) -> (v :: Vec (addNat m n) e) -> (i :: Fin m) ->
             Eq e (get m e (vTake e m n v) i) (get (addNat m n) e v (finIncLim n m i));
get_vTake e m n v i = get_vMove e (addNat m n) m (finIncLim n m) v i;

-- | Returns a suffix of a vector after a given number of elements.
vDrop :: (e :: sort 0) -> (x y :: Nat) -> Vec (addNat x y) e -> Vec y e;
vDrop e i n a = vMove e (addNat i n) n (finInc i n) a;

get_vDrop :: (e :: sort 0) -> (m n :: Nat) -> (v :: Vec (addNat m n) e) -> (i :: Fin n) ->
             Eq e (get n e (vDrop e m n v) i) (get (addNat m n) e v (finInc m n i));
get_vDrop e m n v i = get_vMove e (addNat m n) n (finInc m n) v i;

-- | Select a range [i,..,i+n] of values from the array.
slice :: (e :: sort 0)
      -> (i n o :: Nat)
      -> Vec (addNat (addNat i n) o) e -> Vec n e;
slice e i n o a = vDrop e i n (vTake e (addNat i n) o a); 

-- | Defines a function that maps array elements from one range to another.
vMap :: (s t :: sort 0) -> (s -> t) -> (n :: Nat) -> Vec n s -> Vec n t;
vMap s t f n v = generate n t (\(i :: Fin n) -> f (get n s v i));

get_vMap :: (s t :: sort 0) -> (f :: s -> t) -> (n :: Nat) -> (v :: Vec n s) -> (i :: Fin n) ->
            Eq t (get n t (vMap s t f n v) i) (f (get n s v i));
get_vMap s t f n v i = get_generate n t (\(i :: Fin n) -> f (get n s v i)) i;

-- | Defines a function that maps array elements from one range to another.
vZipWith :: (s t u :: sort 0)
         -> (s -> t -> u)
         -> (n :: Nat) -> Vec n s -> Vec n t -> Vec n u;
vZipWith s t u f n x y = generate n u (\(i :: Fin n) -> f (get n s x i) (get n t y i));

get_vZipWith :: (s t u :: sort 0) -> (f :: s -> t -> u) -> (n :: Nat) ->
                (x :: Vec n s) -> (y :: Vec n t) -> (i :: Fin n) ->
                Eq u (get n u (vZipWith s t u f n x y) i) (f (get n s x i) (get n t y i));
get_vZipWith s t u f n x y = get_generate n u (\(i :: Fin n) -> f (get n s x i) (get n t y i));

-- replicate n x returns an array with n copies of x.
replicate :: (n :: Nat)
          -> ?(e :: sort 0) -> e -> Vec n e;
replicate n e v = generate n e (\(_ :: Fin n) -> v);

get_replicate :: (n :: Nat) -> (e :: sort 0) -> (x :: e) -> (i :: Fin n) ->
                 Eq e (get n e (replicate n e x) i) x;
get_replicate n e x i = get_generate n e (\(_ :: Fin n) -> x) i;

-- Concatenate arrays together.
join  :: (m n :: Nat)
       -> (e :: sort 0)
       -> Vec m (Vec n e)
       -> Vec (mulNat m n) e;
join m n e a =
  let { eltFn :: Fin (mulNat m n) -> e;
        eltFn i = splitFn (finSplitProduct m n i);
        splitFn :: #(Fin m, Fin n) -> e;
        splitFn (i,j) = get n e (get ?m ?(Vec n e) a i) j;
      }
   in generate (mulNat m n) e eltFn;

-- Split array into list
split :: ?(m n :: Nat) -> ?(e :: sort 0) -> Vec (mulNat m n) e -> Vec m (Vec n e);
split  m n e a =
  let { arrayFn :: Fin m -> Vec n e;
        arrayFn i =
         let { eltFn :: Fin n -> e;
               eltFn j = get (mulNat m n) e a (finProduct m i n j);
             }
          in generate n ?e eltFn;
      }
   in generate m ?(Vec n e) arrayFn;

-- Append two arrays together.
append :: (m n :: Nat) -> (e :: sort 0) 
       -> Vec m e -> Vec n e -> Vec (addNat m n) e;
append m n e x y =
  let { eltFn :: Fin (addNat m n) -> e;
        eltFn i = compareFn (finSplitSum m n i);

        compareFn :: Either (Fin m) (Fin n) -> e;
        compareFn (Left _ _ i)  = get m e x i;
        compareFn (Right _ _ i) = get n e y i;
      }
   in generate (addNat m n) e eltFn;

--------------------------------------------------------------------------------
-- Bitvectors

bitvector :: (n :: Nat) -> sort 0;
bitvector n = Vec n Bool;

-- | Returns most-significant bit in a signed bitvector.
msb :: (x :: Nat) -> bitvector (Succ x) -> Bool;
msb x v = get (Succ x) Bool v (FinVal 0 x);

-- | (bvNat x n) yields (n mod 2^x) as an x-bit vector.
bvNat :: (x :: Nat) -> Nat -> bitvector x;

append_bvNat :: (m n x y :: Nat) ->
    Single (bitvector (addNat m n)) (append m n Bool (bvNat m x) (bvNat n y));

-- | Satisfies @bvNat n (bvToNat n x) = x@.
bvToNat :: (n :: Nat) -> bitvector n -> Nat;

bvAdd :: (x :: Nat) -> bitvector x -> bitvector x -> bitvector x;
bvAdd_bvNat :: (n x y :: Nat) -> Single (bitvector n) (bvAdd n (bvNat n x) (bvNat n y));

bvAddWithOverflow :: (x :: Nat) -> bitvector x -> bitvector x -> #(Bool, bitvector x);

bvSub :: (x :: Nat) -> bitvector x -> bitvector x -> bitvector x;
bvMul :: (x :: Nat) -> bitvector x -> bitvector x -> bitvector x;
--TODO

-- Unsigned division and remainder.
--
-- When the divisor is 0, bvUDiv returns a vector with all bits set.
-- (Equal to 2^x - 1), and bvURem returns the divident unchanged.
--
-- These two functions satisfy the property that:
--   bvAdd x (bvMul x (bvUDiv x u v) v) (bvURem x u v) == u
bvUDiv :: (x :: Nat) -> bitvector x -> bitvector x -> bitvector x;
bvURem :: (x :: Nat) -> bitvector x -> bitvector x -> bitvector x;
--TODO

-- Signed division.
-- When the divisor is 0, bvSDiv returns 2^x - 1 when the dividend
-- is non-negative, and -1 when the dividend is negative; bvSRem
-- returns the dividend unchanged.
--
-- Otherwise, the sign of the quotient is the exclusive xor of
-- the sign bit of the dividend and divisor; the remainder is negative
-- if the dividend is negative.

-- bvSDiv and bvSRem satisfy the property that:
--
--   bvAdd x (bvMul x (bvSDiv x u v) v) (bvSRem x u v) == u
bvSDiv :: (x :: Nat) -> bitvector (Succ x) -> bitvector (Succ x) -> bitvector (Succ x);
bvSRem :: (x :: Nat) -> bitvector (Succ x) -> bitvector (Succ x)
       -> bitvector (Succ x);
--TODO:

-- | Shift left by the given number of bits.
-- New bits are False.
bvShl :: (x :: Nat) -> bitvector x -> Nat -> bitvector x;

-- Logical right shift.  New bits are False.
bvShr :: (x :: Nat) -> bitvector x -> Nat -> bitvector x;

-- | Signed right shift.  New bits are equal to most-significant bit.
bvSShr :: (x :: Nat) -> bitvector (Succ x) -> Nat -> bitvector (Succ x);
--TODO

-- | Zipwith specialized to bitvectors.
bvZipWith :: (Bool -> Bool -> Bool)
          -> (n :: Nat)
          -> bitvector n -> bitvector n -> bitvector n;
bvZipWith = vZipWith Bool Bool Bool;

get_bvZipWith :: (f :: Bool -> Bool -> Bool) -> (n :: Nat) ->
                 (x :: bitvector n) -> (y :: bitvector n) -> (i :: Fin n) ->
                 Eq Bool (get n Bool (bvZipWith f n x y) i) (f (get n Bool x i) (get n Bool y i));
get_bvZipWith = get_vZipWith Bool Bool Bool;

-- | Bitwise complement.
bvNot :: (n :: Nat) -> bitvector n -> bitvector n;
bvNot = vMap Bool Bool not;

get_bvNot :: (n :: Nat) -> (v :: bitvector n) -> (i :: Fin n) ->
             Eq Bool (get n Bool (bvNot n v) i) (not (get n Bool v i));
get_bvNot = get_vMap Bool Bool not;

-- | Pairwise conjunction, disjunction, and exclusive or.
bvAnd bvOr bvXor :: (n :: Nat) -> bitvector n -> bitvector n -> bitvector n;
bvAnd = bvZipWith and;
bvOr  = bvZipWith or;
bvXor = bvZipWith xor;

get_bvAnd :: (n :: Nat) -> (x :: bitvector n) -> (y :: bitvector n) -> (i :: Fin n) ->
             Eq Bool (get n Bool (bvAnd n x y) i) (and (get n Bool x i) (get n Bool y i));
get_bvAnd = get_bvZipWith and;

get_bvOr :: (n :: Nat) -> (x :: bitvector n) -> (y :: bitvector n) -> (i :: Fin n) ->
             Eq Bool (get n Bool (bvOr n x y) i) (or (get n Bool x i) (get n Bool y i));
get_bvOr = get_bvZipWith or;

get_bvXor :: (n :: Nat) -> (x :: bitvector n) -> (y :: bitvector n) -> (i :: Fin n) ->
             Eq Bool (get n Bool (bvXor n x y) i) (xor (get n Bool x i) (get n Bool y i));
get_bvXor = get_bvZipWith xor;

-- | Get bit in vector by index with most significant bit at index 0.
bvMbit :: (n :: Nat) -> bitvector n -> Fin n -> Bool;
bvMbit n = get n Bool;

-- | Return true if two bitvectors are equal.
bvEq :: (n :: Nat) -> bitvector n -> bitvector n -> Bool;
bvEq n x y = forallFin n (\(i :: Fin n) -> boolEq (bvMbit n x i) (bvMbit n y i)); 

-- | Return true if two bitvectors are not equal.
bvNe :: (n :: Nat) -> bitvector n -> bitvector n -> Bool;
bvNe n x y = not (bvEq n x y);

-- | Unsigned and signed comparison functions.
bvugt bvuge bvult bvule :: (n :: Nat) -> bitvector n -> bitvector n -> Bool;
bvsgt bvsge bvslt bvsle :: (n :: Nat) -> bitvector (Succ n) -> bitvector (Succ n) -> Bool;

bvule_bvNat :: (n x y :: Nat) -> Single Bool (bvule n (bvNat n x) (bvNat n y));
bvult_bvNat :: (n x y :: Nat) -> Single Bool (bvult n (bvNat n x) (bvNat n y));

-- | Truncates a vector a smaller size.
-- lsb implementation:
bvTrunc :: (x y :: Nat) -> bitvector (addNat y x) -> bitvector y;
bvTrunc x y = vTake Bool y x;
-- msb implementation:
-- bvTrunc :: (x y :: Nat) -> bitvector (addNat x y) -> bitvector y;
-- bvTrunc = vDrop Bool;

-- | Perform a unsigned extension  of the bitvector.
-- @bvUExt x y v@ adds x bits of zeros to the most-significant bits of
-- the y-bit vector v.
-- lsb implementation:
bvUExt :: (x y :: Nat) -> bitvector y -> bitvector (addNat y x);
bvUExt x y a = append y x ?Bool a (replicate x Bool False);
-- msb implementation:
--bvUExt :: (x y :: Nat) -> bitvector y -> bitvector (addNat x y);
--bvUExt x y a = append x y ?Bool (replicate x Bool False) a;

-- | Perform a signed extension of the bitvector.
-- lsb implementation:
bvSExt :: (x y :: Nat) -> bitvector (Succ y) -> bitvector (addNat (Succ y) x);
bvSExt x y a = append (Succ y) x ?Bool a (replicate x Bool (msb y a));
-- msb implementation:
--bvSExt :: (x y :: Nat) -> bitvector (Succ y) -> bitvector (addNat x (Succ y));
--bvSExt x y a = append x (Succ y) ?Bool (replicate x Bool (msb y a)) a;

--------------------------------------------------------------------------------
-- Floating-point values

data Double :: sort 0 where { }

data Float :: sort 0 where { }
